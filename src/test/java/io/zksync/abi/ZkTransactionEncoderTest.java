package io.zksync.abi;

import static org.junit.jupiter.api.Assertions.*;

import io.zksync.helper.CounterContract;
import io.zksync.methods.request.Eip712Meta;
import io.zksync.protocol.core.Token;
import io.zksync.transaction.type.Transaction712;
import io.zksync.utils.ContractDeployer;
import io.zksync.utils.ZkSyncAddresses;
import io.zksync.wrappers.IL2Bridge;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.ECKeyPair;
import org.web3j.utils.Numeric;

public class ZkTransactionEncoderTest {

  private static final Token ETH = Token.createETH();
  private static final String BRIDGE_ADDRESS = "0x8c98381FfE6229Ee9E53B6aAb784E86863f61885";
  private static final BigInteger GAS_LIMIT = BigInteger.valueOf(42);
  private static final BigInteger GAS_PRICE = BigInteger.valueOf(43);
  private static final Long CHAIN_ID = 270L;

  Credentials credentials;

  @BeforeEach
  public void setUp() {
    this.credentials = Credentials.create(ECKeyPair.create(BigInteger.ONE));
  }

  @Test
  public void testEncodeWithdraw() {
    final Function withdraw =
        new Function(
            IL2Bridge.FUNC_WITHDRAW,
            Arrays.asList(
                new Address(credentials.getAddress()),
                new Address(ETH.getL2Address()),
                new Uint256(ETH.toBigInteger(1))),
            Collections.emptyList());

    String calldata = FunctionEncoder.encode(withdraw);

    Transaction712 transaction =
        new Transaction712(
            CHAIN_ID,
            BigInteger.ZERO,
            GAS_LIMIT,
            BRIDGE_ADDRESS,
            BigInteger.ZERO,
            calldata,
            GAS_PRICE,
            GAS_PRICE,
            credentials.getAddress(),
            new Eip712Meta(BigInteger.ZERO, new byte[] {}, null, null));

    String expected =
        "0x71f8a1802b2b2a948c98381ffe6229ee9e53b6aab784e86863f6188580b864d9caed120000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000082010e808082010e947e5f4552091a69125d5dfcb7b8c2659029395bdf80c080c0";

    assertEquals(expected, Numeric.toHexString(TransactionEncoder.encode(transaction, null)));
  }

  @Test
  public void testEncodeDeploy() {
    byte[] bytecodeBytes = Numeric.hexStringToByteArray(CounterContract.BINARY);
    String calldata = FunctionEncoder.encode(ContractDeployer.encodeCreate2(bytecodeBytes));

    Transaction712 transaction =
        new Transaction712(
            CHAIN_ID,
            BigInteger.ZERO,
            GAS_LIMIT,
            ZkSyncAddresses.CONTRACT_DEPLOYER_ADDRESS,
            BigInteger.ZERO,
            calldata,
            GAS_PRICE,
            GAS_PRICE,
            credentials.getAddress(),
            new Eip712Meta(BigInteger.ZERO, new byte[] {}, new byte[][] {bytecodeBytes}, null));

    String expected =
        "0x71f90ae6802b2b2a94000000000000000000000000000000000000800680b8843cda33510000000000000000000000000000000000000000000000000000000000000000010000517112c421df08d7b49e4dc1312f4ee62268ee4f5683b11d9e2d33525a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000082010e808082010e947e5f4552091a69125d5dfcb7b8c2659029395bdf80f90a23b90a20000200000000000200010000000103550000006001100270000000410010019d000000010120018f000000000110004c000000080000c13d00fd00180000040f00fd00090000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000160000c13d000000200100003900000100020000390000000000120439000001200100003900000000000104390000004201000041000000fe0001042e0000000001000019000000ff0001043000040000000000020000000001000410000080020210008c000000330000613d0000000002000411000080010220008c000000330000613d0000004302000041000000000020043900000004020000390000000000120439000000440100004100008002020000390000000003000415000000040330008a00000020033000c900fd00e00000040f000000ff01000039000000030110024f000000000110004c000000560000613d000000040100035f000000000101043b000000000110004c000000330000c13d0000000001000019000000fe0001042e0000008001000039000000400600003900000000001604350000000001000031000000030210008c000000540000a13d0000000102000367000000000302043b000000e003300270000000450430009c0000006c0000613d000000460230009c000000580000613d000000470230009c000000540000c13d0000000002000416000000000220004c000000800000c13d000000040110008a00000048020000410000001f0310008c000000000300001900000000030220190000004801100197000000000410004c0000000002008019000000480110009c00000000010300190000000001026019000000000110004c0000008e0000c13d0000000001000019000000ff000104300000000001000019000000ff000104300000000001000019000000ff000104300000000002000416000000000220004c0000007e0000c13d000000040110008a000000010200008a0000004803000041000000000221004b000000000200001900000000020320190000004801100197000000480410009c00000000030080190000004801100167000000480110009c00000000010200190000000001036019000000000110004c000000840000c13d0000000001000019000000ff000104300000000003000416000000000330004c000000820000c13d000000040110008a00000048030000410000003f0410008c000000000400001900000000040320190000004801100197000000000510004c0000000003008019000000480110009c00000000010400190000000001036019000000000110004c000000a20000c13d0000000001000019000000ff000104300000000001000019000000ff000104300000000001000019000000ff000104300000000001000019000000ff000104300000000001000019000200000006001d00fd00fb0000040f000000020200002900000000020204330000000000120435000000400120021000000049011001970000004c011001c7000000fe0001042e000200000006001d000000000100001900fd00fb0000040f00000001020003670000000402200370000000000202043b0000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000000be0000613d0000004a0100004100000000001004350000001101000039000000040200003900000000001204350000004b01000041000000ff000104300000002401200370000000000201043b000000000120004c0000000001000019000000010100c039000000000112004b000000c50000c13d000100000002001d000200000006001d000000000100001900fd00fb0000040f00000001020003670000000402200370000000000202043b0000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000000c70000613d0000004a0100004100000000001004350000001101000039000000040200003900000000001204350000004b01000041000000ff00010430000000000200001900fd00f90000040f0000000201000029000000000101043300000040011002100000004901100197000000fe0001042e0000000001000019000000ff00010430000000000200001900fd00f90000040f000000020100002900000000010104330000000102000029000000000220004c000000d10000c13d00000040011002100000004901100197000000fe0001042e00000044021000390000004d03000041000000000032043500000024021000390000001a0300003900000000003204350000004e020000410000000000210435000000040210003900000020030000390000000000320435000000400110021000000049011001970000004f011001c7000000ff000104300002000000000002000200000003001d0000002003300039000100000003001d000000ef002104230000000203000029000000200230011a000000000201035500000048010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000050010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d000000fd00000432000000fe0001042e000000ff00010430000000000000000100000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff00000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830200020000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000436dad6000000000000000000000000000000000000000000000000000000006d4ce63c000000000000000000000000000000000000000000000000000000007cf5dab080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000004e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002000000000000000000000000054686973206d6574686f6420616c77617973207265766572747300000000000008c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80c0";

    assertEquals(expected, Numeric.toHexString(TransactionEncoder.encode(transaction, null)));
  }

  @Test
  public void testEncodeExecute() {
    String calldata =
        FunctionEncoder.encode(CounterContract.encodeIncrement(BigInteger.valueOf(42L)));

    Transaction712 transaction =
        new Transaction712(
            CHAIN_ID,
            BigInteger.ZERO,
            GAS_LIMIT,
            "0xe1fab3efd74a77c23b426c302d96372140ff7d0c",
            BigInteger.ZERO,
            calldata,
            GAS_PRICE,
            GAS_PRICE,
            credentials.getAddress(),
            new Eip712Meta(BigInteger.ZERO, new byte[] {}, null, null));

    String expected =
        "0x71f860802b2b2a94e1fab3efd74a77c23b426c302d96372140ff7d0c80a47cf5dab0000000000000000000000000000000000000000000000000000000000000002a82010e808082010e947e5f4552091a69125d5dfcb7b8c2659029395bdf80c080c0";

    assertEquals(expected, Numeric.toHexString(TransactionEncoder.encode(transaction, null)));
  }
}
